@inherits LayoutComponentBase
﻿@using Microsoft.AspNetCore.Components.Authorization
@using MauiBlazor.Components.Authentication
@inject AuthenticationStateProvider authStateProvider
@inject HttpClient httpClient
@inject NavigationManager navigateMgr

<div class="page" data-bs-theme="dark" style="@($"background-color: {GetBackgroundColor()}")">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div style="display: flex; gap: 20px;">
                 <button class="btn btn-outline-secondary" @onclick=ToggleTheme>Change theme</button>
            </div>
            <AuthorizeView>
                <Authorized>
                    <div class="nav-item px-3">
                        <button class="btn btn-danger" style="cursor:pointer" @onclick="LogoutAsync">
                            <span class="oi oi-plus" aria-hidden="true"></span> Logout
                        </button>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4" style>
            @Body
        </article>
    </main>
</div>

@code {
    // public Task ChangeTheme()
    // {

    // }

    // public Task ChangeLang()
    // {

    // }
    private string theme = "light"; // Domyślny motyw
    // private string color = "white";

    private string GetBackgroundColor()
    {
        return theme == "light" ? "white" : "#333";
        // Możesz dostosować tę funkcję do zmiany kolorów w zależności od motywu
    }

    // private string GetColor()
    // {
    //     return color == "black" ? "white" : "black";
    //     Możesz dostosować tę funkcję do zmiany kolorów w zależności od motywu
    // }

    private void ToggleTheme()
    {
        // color = color == "white" ? "black" : "white";
        theme = theme == "light" ? "dark" : "light";
    }

    public async Task LogoutAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var user = customAuthStateProvider.GetAuthenticationStateAsync();
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession());
        navigateMgr.NavigateTo("/login", forceLoad: true, replace: true);
    }
}
