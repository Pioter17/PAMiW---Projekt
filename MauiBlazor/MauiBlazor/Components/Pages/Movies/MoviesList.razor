@page "/movies"

@inject MovieService MovieService
@inject NavigationManager NavigationManager

<PageTitle>Movies</PageTitle>

@if (movies == null)
{
    <p><em>@message</em></p>
}

else
{
    @if (movies.Count == 0)
    {
        <p><em>"Wystąpił błąd"</em></p>
    }
    <div class="container">
        <div class="actions">
            <div class="search">
                <InputText @bind-Value=searchTerm></InputText>
                <button class="btn btn-primary" @onclick=Search>
                    <span class="material-symbols-outlined">
                        search
                    </span>
                </button>
                <button class="btn btn-outline-secondary" @onclick="()=> GoToCreate()">
                    <span class="material-symbols-outlined">
                        add
                    </span>
                </button>
            </div>
            <div>
                <button class="btn btn-primary" disabled="@(currentPage==1)" @onclick="PreviousPage">
                    <span class="material-symbols-outlined">
                        arrow_back
                    </span>
                </button>
                <span>@currentPage</span>
                <button class="btn btn-primary" disabled="@(currentPage==totalPages)" @onclick="NextPage">
                    <span class="material-symbols-outlined">
                        arrow_forward
                    </span>
                </button>
            </div>
        </div>
        @foreach (var movie in movies)
        {
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Name: @movie.name</h5>
                    <p class="card-text">Director: @movie.director.name</p>
                    <p class="card-text">Producer: @movie.producer</p>
                    <p class="card-text">Rating: @movie.rating</p>
                    <p class="card-text">Length: @movie.length</p>
                    <button class="btn btn-outline-danger" @onclick="()=> HandleDelete(movie)">
                        <span class="material-symbols-outlined">
                            delete
                        </span>
                    </button>
                    <button class="btn btn-primary" @onclick="()=> GoToEdit(movie.name)">
                        <span class="material-symbols-outlined">
                            edit
                        </span>
                    </button>
                </div>
            </div>
        }
    </div>

}



@code {
    private List<Shared.Models.Movie> movies;
    private string message = "Loading movies...";

    private int currentPage = 1;
    private int totalPages;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        var response = await MovieService.GetMoviesAsync(currentPage);
        if(response != null)
        {
            movies = response.Content;
            totalPages = response.TotalPages;
        }
    }

    void GoToEdit(string name)
    {
        NavigationManager.NavigateTo($"/movies/editmovie/{name}");
    }

    void GoToCreate()
    {
        NavigationManager.NavigateTo($"/movies/createmovie");
    }

    async Task HandleDelete(Movie movie)
    {
        var response1 = await MovieService.DeleteMovieAsync(movie.id);
        var response = await MovieService.GetMoviesAsync(currentPage);
        if (response != null)
        {
            movies = response.Content;
            totalPages = response.TotalPages;
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadMovies();
        }
    }
    private async Task NextPage()
    {
        currentPage++;
        await LoadMovies();
    }

    private async Task Search()
    {
        currentPage = 1;
        var response = await MovieService.SearchMoviesAsync(searchTerm, currentPage);
        if (response != null)
        {
            movies = response.Content;
            totalPages = response.TotalPages;
        }
    }
}