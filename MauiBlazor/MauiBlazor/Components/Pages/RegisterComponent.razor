@page "/register"
@using MauiBlazor.Components.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using System.Text;
@using Shared.Models
@using System.Net.Http.Json
@inject NavigationManager navigateMgr
@inject AuthenticationStateProvider authStateProvider

<EditForm Model="RegistrationModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="card">
        <div class="card-header">Register Account</div>
        <div class="card-body">
            <div class="form-group">
                <label>Fullname</label>
                <InputText class="form-control" @bind-Value="RegistrationModel.Name"></InputText>
            </div>
            <div class="form-group mt-2">
                <label>Password</label>
                <InputText class="form-control" @bind-Value="RegistrationModel.Password"></InputText>
            </div>
        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </div>
</EditForm>
@code {
    private RegistrationModel RegistrationModel { get; set; } = new();

    private async Task HandleRegister()
    {
        var result = await httpClient.PostAsJsonAsync("http://localhost:8080/api/v1/auth/register", RegistrationModel);
        if (!result.IsSuccessStatusCode)
        {
            return;
        }
        var readResponse = await result.Content.ReadFromJsonAsync<JwtServiceResponse>();
        if (readResponse.token != "") 
        {
            var getUserSession = GetUserClaims(readResponse.token);
            if (getUserSession == null) return;

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(getUserSession);
            navigateMgr.NavigateTo("/movies", forceLoad: true, replace: true);
            RegistrationModel = new RegistrationModel();
        }
        else
        {
            return;
        }
    }
    private UserSession GetUserClaims(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var readToken = handler.ReadJwtToken(token);
        var claims = readToken.Claims;

        return new UserSession()
            {
                // UserName = claims.First(_ => _.Type == ClaimTypes.Name).Value,
                // UserRole = claims.First(_ => _.Type == ClaimTypes.Role).Value,
                // Email = claims.First(_ => _.Type == ClaimTypes.Email).Value,
                Token = token
            };
    }
}